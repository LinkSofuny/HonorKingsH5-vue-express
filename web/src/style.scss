// reset
* {
  box-sizing: border-box;
  outline: none;
}
html {
  font-size: 13px;
}

body {
  margin: 0;
  font-family: Arial, Helvetica, sans-serif;
  line-height: 1.2em;
  background: #f1f1f1;
}
a {
  color: #999999;
}

// colors
$colors: (
  "primary": #db9e3f,
  "white": #fff,
  "light": #f9f9f9,
  "grey": #999,
  "dark-1": #343440,
  "dark": #222,
  "black": #000,
);
// color
@each $colorKey, $color in $colors {
  .text-#{$colorKey} {
    color: $color;
  }
  .bg-#{$colorKey} {
    background-color: $color;
  }
}

// text-align
@each $var in (left, center, right) {
  .text-#{$var} {
    text-align: $var;
  }
}

// font size
$base-font-size: 1rem;
$font-sizes: (
  xs: 0.7692,  // 10
  sm: 0.9231,  // 12
  md: 1,  // 13
  lg: 1.0769,  // 14
  xl: 1.2308,  // 16
);
@each $sizeKey, $size in $font-sizes {
  .fs-#{$sizeKey} {
    font-size: $size * $base-font-size;
  }
}

// flex 
.d-flex {
  display: flex;
}
.flex-column {
  flex-direction: column;
}

$flex-jc:(
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
);
@each $key, $value in $flex-jc {
  .jc-#{$key} {
    justify-content: $value;
  }
}

$flex-ai:(
  start: flex-start,
  end: flex-end,
  center: center,
  stretch: stretch,
);
@each $key, $value in $flex-ai {
  .ai-#{$key} {
    align-items: $value;
  }
}

.flex-1 {
  flex: 1;
}

// spacing
// .mt-1
$spacing-types: (m: margin, p: padding);
$spancing-direction: (t: top, r: right, b:bottom, l: left);
$spacing-base-size: 1rem;
$spacing-sizes: ( 0: 0, 1: 0.25, 2: 0.5, 3: 1, 4: 1.5, 5: 3);


// m-0, mx-0
@each $typeKey, $type in $spacing-types {

  //.m-1
  @each $sizeKey, $size in $spacing-sizes {
      #{$typeKey}-#{$sizeKey} {
        #{$type}: $size * $spacing-base-size;
      } 
  }
  @each $sizeKey, $size in $spacing-sizes {
     // .mx-1
    .#{$typeKey}x-#{$sizeKey} {
      #{$type}-left: $size * $spacing-base-size;
      #{$type}-right: $size * $spacing-base-size;
    }
    // .my-1
    .#{$typeKey}x-#{$sizeKey} {
      #{$type}-top: $size * $spacing-base-size;
      #{$type}-bottom: $size * $spacing-base-size;
    }
   }


  // mt-1:
  @each $directionKey, $direction in $spancing-direction {
   @each $sizeKey, $size in $spacing-sizes {
    .#{$typeKey}#{$directionKey}-#{$sizeKey}{
      #{$type}-#{$direction}: $size * $spacing-base-size
    }
   }
  }
 
}